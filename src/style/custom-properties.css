/*
Concept: Lets define custom properties at root, with default and inheritance.
In this way we do not need to define defaults in usage of these.
*/
/* TODO: Come up with a good naming strategy */



/* Size Properties */

@property --uui-border-radius {
  syntax: '<length>';
  inherits: true;
  initial-value: 3px;
}


/* Color Properties */

@property --uui-color-deep-saffron {
  syntax: '<color>';
  inherits: true;
  initial-value: #F79C37;
}
@property --uui-color-sunglow {
  syntax: '<color>';
  inherits: true;
  initial-value: #FAD634;
}
@property --uui-color-spanish-pink {
  syntax: '<color>';
  inherits: true;
  initial-value: #F5C1BC;
}
@property --uui-color-dark-gunmetal {
  syntax: '<color>';
  inherits: true;
  initial-value: #162335;
}
@property --uui-color-space-cadet {
  syntax: '<color>';
  inherits: true;
  initial-value: #1B264F;
}
@property --uui-color-violet-blue {
  syntax: '<color>';
  inherits: true;
  initial-value: #3544B1;
}
@property --uui-color-maroon-flush {
  syntax: '<color>';
  inherits: true;
  initial-value: #D42054;
}
@property --uui-color-jungle-green {
  syntax: '<color>';
  inherits: true;
  initial-value: #2BC37C;
}
@property --uui-color-chamoisee {
  syntax: '<color>';
  inherits: true;
  initial-value: #9D8057;
}
@property --uui-color-timberwolf {
  syntax: '<color>';
  inherits: true;
  initial-value: #E2DAD4;
}
@property --uui-color-alabaster {
  syntax: '<color>';
  inherits: true;
  initial-value: #F2EBE6;
}
@property --uui-color-white-smoke {
  syntax: '<color>';
  inherits: true;
  initial-value: #F9F7F4;
}
@property --uui-color-white {
  syntax: '<color>';
  inherits: true;
  initial-value: #FFF;
}



/* Theme properties */

@property --uui-color-identity {
  syntax: '<color>';
  inherits: true;
  initial-value: var(--uui-color-space-cadet);
}
@property --uui-color-positive {
  syntax: '<color>';
  inherits: true;
  initial-value: green;
}
:root {
  --uui-color-positive: var(--uui-color-jungle-green);
}
@property --uui-color-danger {
  syntax: '<color>';
  inherits: true;
  initial-value: red;
}
:root {
  --uui-color-danger: var(--uui-color-maroon-flush);
}

/** Example of interface specific props which are not begin used specificly by components, but mapped further into variables for each component **/
@property --uui-interface-background-color {
  syntax: '<color>';
  inherits: true;
  initial-value: var(--uui-color-white;)
}
@property --uui-interface-background-hover-color {
  syntax: '<color>';
  inherits: true;
  initial-value: var(--uui-color-white-smoke);
}
@property --uui-interface-background-active-color {
  syntax: '<color>';
  inherits: true;
  initial-value: var(--uui-color-white-smoke);/* TODO: should be even darker... */
}


/** Above should map further down to specific props for specific components, this should be defined in a file together with the component. example of this: */
@property --uui-button-positive-background-color {
  syntax: '<color>';
  inherits: true;
  initial-value: var(--uui-color-positive);/* TODO: This does not work, we might incorporate a Pre-CSS-Processor to help us with this.*/
}
:root {
  --uui-button-positive-background-color: var(--uui-color-positive);
}
@property --uui-button-positive-text-color {
  syntax: '<color>';
  inherits: true;
  initial-value: var(--uui-color-white);
}
:root {
  --uui-button-positive-text-color: var(--uui-color-white);
}


@media (prefers-color-scheme: dark) {
  :root {
    --uui-color-identity: var(--uui-color-space-cadet);
  }
}
